#ifndef PluginStructures_h__
#define PluginStructures_h__

#include "seditcontrol.h"
#include "PluginTypes.hpp"
#include "PluginService.hpp"


struct PluginHotKey
{
  bool shift;    // true if shift must be pressed
  bool ctrl;     // true if ctrl must be pressed
  wchar_t key;   // virtual code of the key
};

struct PluginCommand
{
  LPCWSTR name;           // name of the command (would be passed into function ExecuteCommand)
  PluginHotKey *hotKey;   // hot key
};

struct PluginAccessor
{
  /**
   *  Returns guid of the plugin (must be generated by any guid generator).
   */
  virtual LPCWSTR GetGUID() const = 0;

  /**
   *  Returns version of the plugin
   */
  virtual int GetVersion() const = 0;

  /**
   *  Returns name of the plugin
   */
  virtual LPCWSTR GetName() const = 0;

  /**
   *  Returns priority of the plugin. Affects on position in plugins queue. 
   */
  virtual int GetPriority() const = 0;

  /**
   *  Executes command with the given name.
   */
  virtual void ExecuteCommand(__in LPCWSTR name) = 0;

  /**
   *  Not used (couldn't be invoked for now).
   */
  virtual void ExecuteFunction(__in LPCWSTR name, __inout void *param) = 0;

  /**
   *  Executes menu command with the given id.
   */
  virtual void ExecuteMenuCommand(__in int itemId) = 0;
};

struct Plugin : PluginAccessor
{

  /**
   *  Initializes plugin. The only functions could be called before this are GetGUID() and GetName().
   */
  virtual bool Init(HMODULE hModule, PluginService *service) = 0;

  /**
   *  Returns array of supported commands. If there are no commands must return NULL.
   */
  virtual const PluginCommand* GetSupportedCommands() = 0;

  /**
   *  Returns size of array returned by function GetSupportedCommands(). If there are no commands must return 0.
   */
  virtual int GetSupportedCommandsNumber() = 0;

  /**
   *  Not used. Must return NULL.
   */
  virtual const LPCWSTR* GetSupportedFunctions() = 0;

  /**
   *  Not used. Must return 0.
   */
  virtual int GetSupportedFunctionsNumber() = 0;

  /**
   *  Creates and returns menu of the plugin. If there is no menu must return NULL.
   *
   *  Params:
   *    firstItemId - id of the first item in plugin menu.
   */
  virtual HMENU GetMenuHandle(int firstItemId) = 0;

  /**
   *  Returns number of items in plugin menu. If there is no menu must return 0.
   */
  virtual int GetMenuItemsNumber() = 0;

  /**
   *  Processes plugin notification.
   *  Params:
   *    notification - pointer to notification
   */
  virtual void ProcessNotification(const PluginNotification *notification) = 0;


  virtual ~Plugin() {}
};


#ifdef UNDER_CE

  #define CREATE_PLUGIN_PROC L"SECreatePlugin"

  #define DELETE_PLUGIN_PROC L"SEDeletePlugin"

#else

  #define CREATE_PLUGIN_PROC "SECreatePlugin"

  #define DELETE_PLUGIN_PROC "SEDeletePlugin"

#endif


#ifdef __cplusplus
extern "C" {
#endif

typedef Plugin* (__stdcall *CreatePluginProc)();

typedef void (__stdcall *DeletePluginProc)(Plugin *plugin);

#ifdef __cplusplus
};
#endif

#endif // PluginStructures_h__