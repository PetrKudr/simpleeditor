#ifndef __ERROR_
#define __ERROR_

#include <string>

enum ErrorCodes
{
  NOTEPAD_NO_ERROR = 0,
  NOTEPAD_UNKNOWN_ERRORCODE,
  NOTEPAD_REGISTER_ERROR,
  NOTEPAD_INIT_EDITCTRL_ERROR,
  NOTEPAD_INIT_COMMCTRL_ERROR,
  NOTEPAD_DOCUMENTS_LIMIT_ERROR,
  NOTEPAD_CREATE_DOCUMENT_ERROR,
  NOTEPAD_DOCUMENT_NOT_EXIST,
  NOTEPAD_DOCUMENT_IS_BUSY,
  NOTEPAD_EDITCTRL_ERROR,
  NOTEPAD_MEMORY_ERROR,
  NOTEPAD_WINDOW_DOES_NOT_EXIST,
  NOTEPAD_CREATE_WINDOW_ERROR,
  NOTEPAD_CREATE_THREAD_ERROR,
  NOTEPAD_LOAD_RESOURCE_ERROR,
  NOTEPAD_OPEN_FILE_ERROR,
  NOTEPAD_SAVE_FILE_ERROR,
  NOTEPAD_INIT_ERROR,
  NOTEPAD_CLOSE_DOC_ERROR,
  NOTEPAD_GET_SUBMENU_ERROR,
  NOTEPAD_CREATE_MENU_ERROR,
  NOTEPAD_CREATE_RESOURCE_ERROR,
  NOTEPAD_CORRUPTED_OPTIONS_FILE,
  NOTEPAD_DIALOG_ERROR,
  NOTEPAD_CORRUPTED_RECENT_FILE,
  NOTEPAD_CANNOT_SAVE_RECENT,
  NOTEPAD_REGISTER_EXTENTION_ERROR,
  NOTEPAD_UNREGISTER_EXTENTION_ERROR,
  NOTEPAD_CANNOT_SAVE_OPTIONS,
  NOTEPAD_CORRUPTED_LANG_DLL,
  NOTEPAD_CANNOT_SEARCH_FILES_IN_PATH,
  NOTEPAD_CANNOT_LOAD_DLL,
  NOTEPAD_DLL_DOES_NOT_CONTAIN_PLUGIN,
  NOTEPAD_CANNOT_INITIALIZE_PLUGIN,
  NOTEPAD_EDITOR_INVALID_PARAMETER,
  NOTEPAD_EDITOR_COPY_ERROR,
  NOTEPAD_EDITOR_SEARCH_ERROR,
  NOTEPAD_EDITOR_CREATE_BRUSH_ERROR,
  NOTEPAD_EDITOR_CREATE_PEN_ERROR,
  NOTEPAD_EDITOR_APPEND_NOT_INITIALIZED,
  NOTEPAD_EDITOR_RECEIVE_NOT_INITIALIZED,
  NOTEPAD_EDITOR_WINDOW_INFO_UNAVAILABLE,
  NOTEPAD_EDITOR_BREAKSYMS_LIMIT_REACHED,
  NOTEPAD_EDITOR_WINDOW_IS_BLOCKED,
  NOTEPAD_EDITOR_WRONG_REPLACE_PATTERN,
  NOTEPAD_LANG_DLL_VERSION_ERROR,

  COUNT
};

struct NotepadError
{
  int code;
  std::wstring message;
};

namespace CError
{
  extern void SetError(int err, ...);
  extern void SetError(const NotepadError &error);
  extern const NotepadError& GetError();
  extern bool HasError();

  extern int TranslateEditor(int err);
  extern int TranslateFile(int err);
  extern int TranslateRegister(int err);

  extern void GetErrorMessage(__out std::wstring &errmsg, __in int err, ...);
  extern void GetSysErrorMessage(int err, std::wstring &errmsg);
};


#endif /* __ERROR_ */